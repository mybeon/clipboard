name: Build
on:
  workflow_dispatch:
  push:
    tags:
      - "v*"
jobs:
  main:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Getting code
        uses: actions/checkout@v3
      - name: Creating cache key
        id: cache-key
        run: |
          jq 'del(.["version"], .["packages"][""]["version"])' package-lock.json > packages-only.json
          echo hash=$(echo -n "$(cat packages-only.json)" | md5sum | mawk '{print $1}') >> $GITHUB_OUTPUT
      - name: Caching dependencies
        uses: actions/cache@v3
        id: node-modules-cache
        with:
          path: node_modules
          key: deps-node-modules-${{ steps.cache-key.outputs.hash }}
      - name: Installing dependencies
        if: ${{ !steps.node-modules-cache.outputs.cache-hit }}
        run: npm ci
      - name: Building for linux
        run: npm run dist
      - name: Creating new release
        if: ${{ !env.ACT }}
        id: create-release
        run: |
          response=$(curl -L \
          -X POST \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          https://api.github.com/repos/${{ github.repository }}/releases \
          -d '{"tag_name":"${{ github.ref_name }}","name":"${{ github.ref_name }}","body":"description","draft":true}')
          echo release_id=$(echo $response | jq -r '.id') >> $GITHUB_OUTPUT
      - name: Uploading release binary
        if: ${{ !env.ACT }}
        run: |
          version_number=$(echo ${{ github.ref_name }} | tr -d "v")
          curl -L \
          -X POST \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          -H "Content-Type: application/vnd.debian.binary-package" \
          "https://uploads.github.com/repos/${{ github.repository }}/releases/${{ steps.create-release.outputs.release_id }}/assets?name=clipboard_${version_number}_amd64.deb" \
          --data-binary "@dist/clipboard_${version_number}_amd64.deb"